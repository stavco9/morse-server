#!/usr/bin/groovy
pipeline {
    agent any

    environment {
        registryAddress = 'stavco9'
        registryCredential = '964f61be-7736-4d8f-af4a-8951fccf1fd9'
        imageName = 'morse-server'
        imagePath = ''
        listenPort = ''
        environment = ''
    }

    stages {
        stage ('Clean the workspace'){
            steps{
                sh "docker system prune -af --volumes"
            }
        }

        stage('Build Docker image and push to registry') {
            steps {
                script{
                    environment = 'dev'
                    listenPort = 5000

                    if(env.BRANCH_NAME == 'master' || env.BRANCH_NAME == 'release' || env.BRANCH_NAME == 'main'){
                        environment = 'release'
                        listenPort = 4000
                    }
                    
                    imageTag = "${environment}-${BUILD_NUMBER}"
                    imagePath = "${registryAddress}/${imageName}:${imageTag}"

                    buildImage(imagePath, listenPort)
                    pushImage()
                }
            }
        }

        stage ('Invoke Test Pipeline') {
           steps {
                build job: 'Morse Server e2e testing', parameters: [
                string(name: 'listenPort', value: listenPort.toString()),
                string(name: 'imagePath', value: imagePath)
                ]
            }
        }

        stage ('Remove the current image from server'){
            steps{
                sh "docker image rm ${imagePath}"
            }
        }

        stage ('Invoke Deploy Pipeline') {
            steps {
                build job: 'Morse Server deploy', parameters: [
                string(name: 'listenPort', value: listenPort.toString()),
                string(name: 'imagePath', value: imagePath),
                string(name: 'environment', value: environment)
                ]
            }
        }
    }
}

def buildImage(imagePath, listenPort){
    dir ('server' ) {
        dockerImage = docker.build("${imagePath}", "--build-arg LISTEN_PORT=${listenPort} .")
    }
}

def pushImage(){
    docker.withRegistry( '', registryCredential ) {
        dockerImage.push()
    }
}