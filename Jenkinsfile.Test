#!/usr/bin/groovy
pipeline {
    agent {
        kubernetes{
            label 'jenkins-docker-slave'
            defaultContainer 'jenkins-docker-slave'
        }
    }

    parameters {
        string(defaultValue: "", name: 'listenPort')
        string(defaultValue: "", name: 'imagePath')
        string(defaultValue: "", name: 'environment')
    }

    environment {
        registryAddress = 'stavco9'
        deployName = 'morse-server'
        dnsZone = 'stavco9.com'
        registryCredential = '964f61be-7736-4d8f-af4a-8951fccf1fd9'
        kubernetesUrl = 'https://462d1a51-7954-49d8-afc4-078068dc1760.k8s.ondigitalocean.com'
        kubernetesCredential = '23ebcd6f-781e-40e0-943c-f31626dbc806'
        kubernetesNamespace = 'morse-server'
        dockerImage = ''
        dnsName = ''
    }

	stages {
		stage('Pull Server Image and run it') {
			steps {
                script{
                    pullServerImage(imagePath)
                    runServerImage(imagePath, listenPort)
                }
			}
		}

        stage('Build Client Image'){
            steps{
                buildClientImage("morse-client")
            }
        }

        stage('Test E2E Server functionality'){
            steps{
                script{
                    def serverReachable = false
                    def serverAddress = sh "hostname --ip-address"
                }

                timeout(30){
                    while({
                        def testPassed = testServer("morse-client", "http://${serverAddress}:${listenPort}")
                        
                        // When the test Passed at the first time, then we know the server is reachable
                        if (testPassed){
                            serverReachable = true
                        }

                        // If the test passed before and now it is not passing 
                        if (serverReachable && !testPassed){
                            error("The test have been failed because it stopped to word after it worked before")
                        }

                        sleep 5
                    }()) continue
                }

                if (!serverReachable || !testPassed){
                    error("The server was not reachable in the last 30 seconds")
                }
                
                echo "e2e Test has been passed !!!!!"
            }
        }
	}
}

def pullServerImage(imagePath){
    dockerImage = docker.image("${imagePath}")

    docker.withRegistry( '', registryCredential ) {
        dockerImage.pull()
    }
}

def runServerImage(imagePath, listenPort){
    sh "docker run -d -p ${listenPort}:${listenPort} ${imagePath}"
}

def buildClientImage(imageName){
    dir ('client'){
        dockerImage = docker.build("${imageName}")     
    }
}

def testServer(clientImage, serverUrl){
    def status = sh "docker run -e \"SERVER_URL=${serverUrl}\" ${clientImage}"

    if (status != 0){
        return false
    }

    return true
}