#!/usr/bin/groovy
pipeline {
    agent any

    parameters {
        string(defaultValue: "", name: 'listenPort')
        string(defaultValue: "", name: 'imagePath')
    }

    environment {
        registryAddress = 'stavco9'
        registryCredential = '964f61be-7736-4d8f-af4a-8951fccf1fd9'
        clientImageName = 'morse-client'
        dockerImage = ''
        dnsName = ''
    }

    stages {

        // Make fake parameters if the job has been triggered manually
        stage('Check if this job has been triggered manually'){
            steps{
                script{
                    if ( currentBuild.rawBuild.getCauses()[0].toString().startsWith('hudson.model.Cause$UserIdCause') ){
                        listenPort = 1095
                        imagePath = "stavco9/fake:manual"
                    }
                }
            }
        }

        stage('Stop all running server containers'){
            steps{
                echo 'Stopping the server containers'
                stopServerContainerByPort(listenPort)
            }
        }

        stage('Pull Server Image and run it') {
            steps {
                script{
                    pullServerImage(imagePath)
                    runServerImage(imagePath, listenPort)
                }
            }
        }

        stage('Build Client Image'){
            steps{
                buildClientImage(clientImageName)
            }
        }

        stage('Test E2E Server functionality'){
            steps{
                script{

                    // Get the host IP address in case of VM Slave
                    serverAddress = sh (
                        script: "/sbin/ip route|awk '/docker0/ { print ${'$'}9 }'",
                        returnStdout: true).trim()

                    // Get the host IP address in case of Container Slave
                    //serverAddress = sh (
                    //    script: "/sbin/ip route|awk '/default/ { print ${'$'}3 }'",
                    //    returnStdout: true).trim()

                    // Run the client code                        
                    testPassed = testServer(clientImageName, "http://${serverAddress}:${listenPort}")

                    if (!(testPassed)){
                        error('e2e tests have been failed...')
                    }
                    else{
                        echo 'e2e tests have been passed successfully !!!'
                    }
                }
            }
        }
    }    
    post {
        always {
            echo 'Stopping the server containers'

            stopServerContainerByPort(listenPort)
        }
    }
}

def pullServerImage(imagePath){
    dockerImage = docker.image("${imagePath}")

    docker.withRegistry( '', registryCredential ) {
        dockerImage.pull()
    }
}

// Run in the background
def runServerImage(imagePath, listenPort){
    sh "docker run -d -p ${listenPort}:${listenPort} ${imagePath}"
}

def stopServerContainerByPort(listenPort){
    serversContainers = sh (
    script: "docker ps -q --filter publish=${listenPort}",
    returnStdout: true)

    if (serversContainers){
        sh "docker stop ${'$'}(echo ${serversContainers})"

        echo "Stopped"
    }
    else{
        echo "No containers exist"
    }
}

def buildClientImage(imageName){
    dir ('client'){
        dockerImage = docker.build("${imageName}")
    }
}

// Run the container in foreground and return the resuly by status code
def testServer(clientImage, serverUrl){
    try{
        sh "docker run -e \"SERVER_URL=${serverUrl}\" ${clientImage}"

        return true
    }
    catch(exc){
        return false
    }
}