#!/usr/bin/groovy
pipeline {
    agent {
        kubernetes{
            label 'jenkins-docker-slave'
            defaultContainer 'jenkins-docker-slave'
        }
    }

    //options {
    //    skipDefaultCheckout true
    //}

    parameters {
        string(defaultValue: "", name: 'listenPort')
        string(defaultValue: "", name: 'imagePath')
        string(defaultValue: "", name: 'environment')
    }

    environment {
        registryAddress = 'stavco9'
        deployName = 'morse-server'
        dnsZone = 'stavco9.com'
        registryCredential = '964f61be-7736-4d8f-af4a-8951fccf1fd9'
        kubernetesUrl = 'https://462d1a51-7954-49d8-afc4-078068dc1760.k8s.ondigitalocean.com'
        kubernetesCredential = '23ebcd6f-781e-40e0-943c-f31626dbc806'
        clientImageName = 'morse-client'
        kubernetesNamespace = 'morse-server'
        dockerImage = ''
        dnsName = ''
    }

    stages {
        stage('Stop all running server containers'){
            steps{
                echo 'Stopping the server containers'

                stopServerContainerByPort(listenPort)
            }
        }

        stage('Pull Server Image and run it') {
            steps {
                script{
                    pullServerImage(imagePath)
                    runServerImage(imagePath, listenPort)
                }
            }
        }

        stage('Build Client Image'){
            steps{
                buildClientImage(clientImageName)
            }
        }

        stage('Test E2E Server functionality'){
            steps{
                script{
                    serverReachable = false

                    // Get the host IP address which runs the server container (This slave is a Docker container)
                    serverAddress = sh (
                        script: "/sbin/ip route|awk '/default/ { print ${'$'}3 }' | xargs | awk 'NF'",
                        returnStdout: true)

                    counter = 1

                    echo "${serverAddress}"

                    retry(6){
                        testPassed = testServer(clientImageName, "http://${serverAddress}:${listenPort}")

                        // When the test Passed at the first time, then we know the server is reachable
                        if (!(serverReachable) && testPassed){
                            serverReachable = true
                        }
                        // If the test passed before and now it is not passing 
                        else if (serverReachable && !(testPassed)){
                            error('The test have been failed because it stopped to word after it worked before')
                        }
                        
                        if (testPassed){
                            echo "${counter} time: test has been passed"
                        }
                        else{
                            echo "${counter} time: test has been failed"
                        }

                        sleep 5

                        counter++
                    }

                    if (!(serverReachable) || !(testPassed)){
                        error('The server was not reachable in the last 30 seconds')
                    }
                }
            }
        }
    }    
    post {
        always {
            echo 'Stopping the server containers'

            stopServerContainerByPort(listenPort)
        }
    }
}

def pullServerImage(imagePath){
    dockerImage = docker.image("${imagePath}")

    docker.withRegistry( '', registryCredential ) {
        dockerImage.pull()
    }
}

def runServerImage(imagePath, listenPort){
    sh "docker run -d -p ${listenPort}:${listenPort} ${imagePath}"
}

def stopServerContainerByPort(listenPort){
    serversContainers = sh (
    script: "docker ps -q --filter publish=${listenPort}",
    returnStdout: true)

    if (serversContainers){
        sh "docker stop ${'$'}(echo ${serversContainers})"

        echo "Stopped"
    }
    else{
        echo "No containers exist"
    }
}

def buildClientImage(imageName){
    dir ('client'){
        dockerImage = docker.build("${imageName}")
    }
}

def testServer(clientImage, serverUrl){
    try{
        sh "docker run -e \"SERVER_URL=${serverUrl}\" ${clientImage}"

        return true
    }
    catch(exc){
        return false
    }
}